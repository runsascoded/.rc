#!/usr/bin/env node

var moment = require('moment');
var args = require('node-getopt').create([
  ['g', 'graphite'],
  ['c', 'cloudera']
]).bindHelp().parseSystem();

var opts = args.options;
args = args.argv;

function convert(args) {
  return args.map(function(arg) {
    var flipFormat = true;
    var num = 0;
    var period = 'h';
    var suffixMatch = arg.match(/([+-][0-9]+)([hmdwMsyY])$/);
    if (suffixMatch) {
      num = suffixMatch[1];
      period = suffixMatch[2];
      arg = arg.substr(0, suffixMatch.index);
      flipFormat = false;
    }
    if (arg.match(/^[0-9]+$/)) {
      var seconds = parseInt(arg);
      var log10 = Math.log(seconds) / Math.log(10);
      if (log10 < 10) {
        seconds *= 1000;
      } else {
        while (log10 > 13) {
          seconds /= 1000;
          log10 -= 3;
        }
      }
      if (flipFormat)
        return moment(new Date(seconds)).add(num, period).toString();
      return moment(new Date(seconds)).add(num, period).unix();
    } else {
      var m = arg.match(/^(\d\d)\/\d\d\/\d\d \d\d:\d\d:\d\d/)
      if (m) {
        if (parseInt(m[1]) < 70) {
          arg = '20' + arg;
        } else {
          arg = '19' + arg;
        }
      }
      if (flipFormat)
        return moment(new Date(arg)).add(num, period).unix();
      return moment(new Date(arg)).add(num, period).toString();
    }
  });
}

function toUnix(arg) {
  if (arg.match(/^[0-9]+/)) {
    var num = parseInt(arg);
    var log10 = Math.log(num) / Math.log(10);
    if (log10 < 10) {
      num *= 1000;
    } else {
      while (log10 > 13) {
        num /= 1000;
        log10 -= 3;
      }
    }
    return moment(new Date(num)).unix();
  } else {
    return moment(new Date(arg)).unix();
  }
}

if (opts.cloudera || opts.graphite) {
  if (args.length != 2) {
    throw new Error("--graphite and --cloudera modes require exactly two arguments");
  }
  if (opts.graphite) {
    console.log("&from=%d&until=%d", toUnix(args[0]), toUnix(args[1]));
  } else {
    console.log("&startTime=%d000&endTime=%d000&markerTime=%d000&firstTime=%d000&lastTime=%d000", toUnix(args[0]), toUnix(args[1]), toUnix(args[1]), toUnix(args[0]), toUnix(args[1]));
  }
  process.exit(0);
}

function print(arg) {
  console.log(arg);
}

if (args.length) {
  convert(args).forEach(print);
} else {
  var stdin = '';
  process.stdin.on('data', function(buf) { stdin += buf.toString(); });
  process.stdin.on('end', function() {
    convert(stdin.split('\n').filter(function(line) { return !!line; })).forEach(print);
  });
}
