#!/usr/bin/python

import errno
import os
import re
import shutil
import subprocess
import sys
import tarfile
from tempfile import mkdtemp, NamedTemporaryFile

remote=None

push_remote_re = '(?P<name>[^\s]+)\s+((?P<user>[^@]+)@)?(?P<host>[^:]+):(?P<path>[^\s]+)\s\\(push\\)'

def git_remotes():
  remote_lines = subprocess.Popen(['git', 'remote', '-v'], stdout=subprocess.PIPE).communicate()[0].split('\n')
  remotes = {}
  map(
    lambda remote: remotes.update({remote.group('name'): remote}), 
    filter(lambda x: x, map(lambda line: re.match(push_remote_re, line), remote_lines))
  )
  return remotes


remote_names = [ sys.argv[1] ] if len(sys.argv) > 1 else [ 'devbox', 'rpi' ]

remotes = git_remotes()
found_remotes = [ remotes[remote] for remote in remote_names if remote in remotes ]
if len(found_remotes) > 1:
  raise Exception('Found multiple eligible remotes: %s' % ','.join(map(lambda remote: remote.group('name'), found_remotes)))
if not found_remotes:
  raise Exception('Found no eligible remotes: %s' % ','.join(remote_names))

remote = found_remotes[0]

print "Got remote %s at host %s. Pushing.." % (remote.group('name'), remote.group('host'))
subprocess.call([ 'git', 'push', remote.group('name') ])
print 'Pushed!'

try:
  tempdir = mkdtemp()

  unstaged_diff_file_basename = 'unstaged_diff_file'
  staged_diff_file_basename = 'staged_diff_file'

  unstaged_diff_file_path = os.path.join(tempdir, unstaged_diff_file_basename)
  staged_diff_file_path = os.path.join(tempdir, staged_diff_file_basename)

  tar_file_path = os.path.join(tempdir, 'diffs.tar.gz')

  with open(unstaged_diff_file_path, 'w') as unstaged_diff_file, \
          open(staged_diff_file_path, 'w') as staged_diff_file, \
          tarfile.open(tar_file_path, 'w:gz') as tar:

    subprocess.Popen(['git', 'diff'], stdout=unstaged_diff_file).wait()
    unstaged_diff_file.flush()

    subprocess.Popen(['git', 'diff', '--cached'], stdout=staged_diff_file).wait()
    staged_diff_file.flush()

    tar.add(staged_diff_file_path, arcname=staged_diff_file_basename)
    tar.add(unstaged_diff_file_path, arcname=unstaged_diff_file_basename)

  tar_basename = os.path.basename(tar_file_path)

  #  tar.flush()
  cmd = ['scp', tar.name, '%s:%s' % (remote.group('host'), remote.group('path'))]
  print "scp'ing tar file: %s" % ' '.join(cmd)
  subprocess.call(cmd)

  remote_cmd = ' && '.join([
    "cd %s" % remote.group("path"),
    "git reset --hard HEAD",
    "if [ -e %(staged)s ]; then echo 'ERROR: staged diff file %(staged)s already exists'; exit 1; fi" % { 'staged': staged_diff_file_basename },
    "tar mxf %s" % tar_basename,
    "if [ -s %(staged)s ]; then echo 'applying staged diff'; git apply %(staged)s; git add .; git reset %(staged)s %(unstaged)s %(tar)s; fi" % { 'staged': staged_diff_file_basename, 'unstaged': unstaged_diff_file_basename, 'tar': tar_basename },
    "if [ -s %(filename)s ]; then echo 'applying unstaged diff'; git apply %(filename)s; fi" % { 'filename': unstaged_diff_file_basename },
    "rm -rf $(git ls-files --other --exclude-standard)",
  ])

  print 'remote_cmd: %s' % remote_cmd

  subprocess.call([ 'ssh', remote.group('host'), remote_cmd ])

finally:
  try:
    shutil.rmtree(tempdir)
  except OSError as exc:  
    if exc.errno != errno.ENOENT:  # ENOENT - no such file or directory
      raise  # re-raise exception    






