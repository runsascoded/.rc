#!/bin/bash


# TODO: arg-ify these
staged="staged_diff_file"
unstaged="unstaged_diff_file"
tar="diffs.tar.gz"
tar_files_file="tar_files"
added_files="added_files"
deleted_files="deleted_files"
remote_script="git-unpack-and-apply-diffs"

cur_branch_name="master"

echo "remote.. git-unpack-and-apply-diffs!"

set -e

git reset --hard HEAD
git checkout "$cur_branch_name"
rm -rf "$(git ls-files --other --exclude-standard)"

tar tf "$tar" > "$tar_files_file"
echo "$tar" "$remote_script" "$tar_files_file" >> "$tar_files_file"
tar mxf "$tar"

if [ -s "$staged" ]; then

  echo '*** applying staged diff'

  echo "Looking for $(wc -l "$added_files") files..."
  for f in $(cat "$added_files"); do
    if [ -f "$f" ]; then
      echo -en "\tWarning: added file already exists and is not tracked: '$f'.. "
      if [ ! -z "$PROMPT_FOR_REMOVALS" ]; then
        echo "Remove? [Y/n]"
        read input
        echo "Input: $input"
        if [ -z "$input" -o "$(echo "${input:0:1}" | tr "[:lower:]" "[:upper:]")" == "Y" ]; then
          echo -e "\tyay!"
          rm -f "$f"
        else
          exit 1
        fi
      else
        echo "Removed."
        rm -f "$f"
      fi
    fi
  done

  git apply "$staged"
  git add .
  git add -f $(cat "$added_files")
  git rm -f $(cat "$deleted_files")

  set +e
  echo "Resetting: $(cat "$tar_files_file")"
  git reset $(cat "$tar_files_file")
  set -e

fi

if [ -s "$unstaged" ]; then
  echo '*** applying unstaged diff'
  git apply "$unstaged"
fi

echo "Verifying staged diff..."
diff "$staged" <(git diff --cached)

echo "Verifying unstaged diff..."
diff "$unstaged" <(git diff)

rm -rf $(git ls-files --other --exclude-standard) $(cat "$tar_files_file")
